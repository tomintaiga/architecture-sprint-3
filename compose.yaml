services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 29092:29092
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    healthcheck:
      test: nc -z localhost 29092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - internal

  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 29093:29092
    hostname: kafka2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    healthcheck:
      test: nc -z localhost 29092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - internal

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092,kafka2:29093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - internal

  telemetry:
    build: ./telemetry/
    ports:
      - 8010:8080
    environment:
      PORT: 8080
      KAFKA: kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      kong:
        condition: service_healthy
    networks:
      - backend
      - internal

  devices:
    build: ./devices/
    ports:
      - 8030:8080
    environment:
      PORT: 8080
      KAFKA: kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      kong:
        condition: service_healthy
    networks:
      - backend
      - internal

  monolith-db:
    image: postgres:14.7-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "15432:5432"
    volumes:
      - ./smart-home-monolith/src/main/resources/init.sql:/docker-entrypoint-initdb.d/create_db.sql
      - monolith-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend
      - internal

  monolith:
    build: ./smart-home-monolith/
    environment:
      TOPIC_NAME: temperature
      KAFKA: "kafka:29092"
    ports:
      - 8020:8080
    depends_on:
      monolith-db:
        condition: service_started
      kafka:
        condition: service_healthy
      kong:
        condition: service_healthy
    networks:
      - backend
      - internal

  kong:
    image: kong
    restart: always
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: warn
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yaml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl, 0.0.0.0:9080 http2, 0.0.0.0:9081 http2 ssl
    healthcheck:
      test: ["CMD", "kong", "health"]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    volumes:
      - ./kong/:/usr/local/kong/declarative
    ports:
      - "8001:8001" # admin
      - "8444:8444" # admin ssl
      - "8000:8000" # proxy
      - "8443:8443" # proxy ssl
      - "9080:9080" # proxy http2
      - "9081:9081" # proxy http2 ssl
    networks:
      - backend
      - internal
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
    networks:
      - backend
      - internal

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
    networks:
      - backend

volumes:
  monolith-db-data:
  prom_data:

networks:
  backend:
  internal:
