/*
 * Телеметрия
 *
 * Описание синхронного API
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"context"
	"log"
	"telemetry/consumer"
	"telemetry/controller"
	"telemetry/repository"

	"github.com/gin-gonic/gin"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/spf13/viper"
)

const (
	CFG_PREFIX                = "TELE"
	CFG_PORT                  = "PORT"
	CFG_PORT_DEFAULT          = "8080"
	CFG_KAFKA_ADDRESS         = "KAFKA"
	CFG_KAFKA_ADDRESS_DEFAULT = "kafka:9092"
)

func prometheusHandler() gin.HandlerFunc {
	h := promhttp.Handler()

	return func(c *gin.Context) {
		h.ServeHTTP(c.Writer, c.Request)
	}
}

func main() {
	// Prepare config
	viper.AutomaticEnv()
	viper.SetEnvPrefix(CFG_PREFIX)
	viper.SetDefault(CFG_PORT, CFG_PORT_DEFAULT)
	viper.SetDefault(CFG_KAFKA_ADDRESS, CFG_KAFKA_ADDRESS_DEFAULT)

	// Prepare API
	r := gin.Default()

	repo := repository.NewMemoryRepository2()
	cnt := controller.NewController(repo)

	// Start legacy connection
	legacy, err := consumer.NewConsumer(viper.GetString(CFG_KAFKA_ADDRESS), repo)
	if err != nil {
		log.Panicf("Can't start kafka consumer: %v", err)
	}

	ctx, calcel := context.WithCancel(context.Background())
	defer calcel()
	go legacy.Run(ctx)

	// Start HTTP
	r.GET("/", cnt.Index())
	r.GET("/telemetry", cnt.TelemetryRead())
	r.POST("/telemetry", cnt.TelemetryWrite())
	r.GET("/metrics", prometheusHandler())

	r.Run(":" + viper.GetString(CFG_PORT))
}
